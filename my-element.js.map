{"version":3,"file":"my-element.js","sourceRoot":"","sources":["src/my-element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAiC,MAAM,KAAK,CAAC;AAC1E,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AACjE,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AACrD,OAAO,2DAA2D,CAAC;AAEnE,MAAM,OAAO,eAAgB,SAAQ,WAA2B;CAAG;AAEnE;;;;;;GAMG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;;QA8FS,aAAQ,GAAc,EAAE,CAAC;QAGxB,kBAAa,GAAW,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;IA8D3D,CAAC;IA5DoB,OAAO,CAAC,iBAAiC;QAC1D,IAAI,iBAAiB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;YAC1C,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;SAC/C;IACH,CAAC;IAEM,eAAe;QACpB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAChD,CAAC;IAEe,MAAM;QACpB,MAAM,gBAAgB,GAAqB,EAAE,CAAC;QAC9C,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;YAChC,gBAAgB,CAAC,IAAI,CACnB,IAAI,CAAA;mBACO,QAAQ,CAAC;gBAChB,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa;aACxC,CAAC;;;;;;oBAMQ,IAAI,CAAC,IAAI;sBACP,uBAAA,IAAI,uDAAgB;eAC3B,IAAI,CAAC,KAAK;;cAEX,CACP,CAAC;SACH;QACD,OAAO,IAAI,CAAA;;;;;;;cAOD,gBAAgB;;;;;;;KAOzB,CAAC;IACJ,CAAC;CAeF,CAAA;qGAbiB,EAAc;IAC5B,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE;QACf,EAAE,CAAC,cAAc,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,GAAI,EAAE,CAAC,MAA4B,CAAC,IAAI,CAAC;QAC3D,IAAI,CAAC,aAAa,CAChB,IAAI,eAAe,CAAC,YAAY,EAAE;YAChC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,CAAC,aAAa,EAAC;YAClC,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACf,CAAC,CACH,CAAC;KACH;AACH,CAAC;AA7JsB,gBAAM,GAAG;IAC9B,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAwFF;CACD,CAAA;AAGF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,CAAA,KAAc,CAAA,EAAC,CAAC;2CACD;AAGhC;IADC,KAAK,EAAE;gDACiD;AAjG9C,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CA+JrB;SA/JY,SAAS","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElement, html, css, TemplateResult, PropertyValues} from 'lit';\nimport {customElement, property, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport '@shoelace-style/shoelace/dist/components/button/button.js';\n\nexport class NavigationEvent extends CustomEvent<{href: string}> {}\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  public static override styles = [\n    css`\n      :host {\n        display: block;\n      }\n      sl-button::part(base) {\n        border: none;\n      }\n      #menu-button::part(base) {\n        background-color: rgba(0, 0, 0, 0.2);\n        color: white;\n      }\n      *,\n      *::before,\n      *::after {\n        box-sizing: border-box;\n      }\n      li {\n        all: unset;\n      }\n      ul {\n        display: contents;\n      }\n      header {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        padding-left: 3.5rem;\n        padding-right: 3.5rem;\n        align-items: center;\n        width: 100%;\n        height: 5rem;\n        background-color: var(--header-background, var(--brand-color, red));\n      }\n      .nav-link {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        place-items: center;\n        place-content: center;\n      }\n      .nav-link::part(label) {\n        color: white;\n      }\n      .nav-link::part(base) {\n        padding-left: 2rem;\n        padding-right: 2rem;\n        display: flex;\n        place-items: center;\n        place-content: center;\n        width: 100%;\n        height: 100%;\n        border-radius: 0;\n        border: 3px solid transparent;\n      }\n      .nav-link::part(base):focus-visible {\n        transition: none;\n        border-color: yellow;\n        outline: none;\n      }\n\n      nav {\n        height: 100%;\n        display: flex;\n        flex-direction: row;\n      }\n      #logo::part(base) {\n        width: fit-content;\n        height: fit-content;\n      }\n      #logo::part(label) {\n        display: contents;\n      }\n      li.active > .indicator {\n        visibility: visible;\n      }\n      li {\n        position: relative;\n      }\n      .indicator {\n        visibility: hidden;\n        position: absolute;\n        background-color: white;\n        width: 75%;\n        left: 12.5%;\n        height: 5px;\n        border-radius: 2px;\n        bottom: 4px;\n      }\n    `,\n  ];\n\n  @property({type: Array<NavItem>})\n  public navItems: NavItem[] = [];\n\n  @state()\n  private _current_href: string = window.location.pathname;\n\n  protected override updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has('_current_href')) {\n      history.pushState({}, '', this._current_href);\n    }\n  }\n\n  public updateIndicator(): void {\n    this._current_href = window.location.pathname;\n  }\n\n  public override render(): TemplateResult {\n    const navItemsTemplate: TemplateResult[] = [];\n    for (const item of this.navItems) {\n      navItemsTemplate.push(\n        html`<li\n          class=\"${classMap({\n            active: item.href == this._current_href,\n          })}\"\n        >\n          <div class=\"indicator\"></div>\n          <sl-button\n            variant=\"text\"\n            class=\"nav-link\"\n            href=\"${item.href}\"\n            @click=\"${this.#onClickNavLink}\"\n            >${item.label}</sl-button\n          >\n        </li>`\n      );\n    }\n    return html`\n      <header>\n        <sl-button id=\"menu-button\" size=\"large\" caret>\n          Wolfgang Fuertauer\n        </sl-button>\n        <nav>\n          <ul>\n            ${navItemsTemplate}\n          </ul>\n        </nav>\n        <sl-button variant=\"text\" id=\"logo\" href=\"/demo\">\n          <img src=\"https://placeholder.pics/svg/80x50\" alt=\"Foresight Logo\" />\n        </sl-button>\n      </header>\n    `;\n  }\n\n  #onClickNavLink(ev: MouseEvent): void {\n    if (!ev.ctrlKey) {\n      ev.preventDefault();\n      this._current_href = (ev.target as HTMLAnchorElement).href;\n      this.dispatchEvent(\n        new NavigationEvent('navigation', {\n          detail: {href: this._current_href},\n          bubbles: true,\n          composed: true,\n        })\n      );\n    }\n  }\n}\n\nexport interface NavItem {\n  label: string;\n  href: string;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-element': MyElement;\n  }\n}\n"]}